// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	entities "jobsity-code-challenge/entities"

	mock "github.com/stretchr/testify/mock"
)

// Repo is an autogenerated mock type for the Repo type
type Repo struct {
	mock.Mock
}

// CreateNewUSer provides a mock function with given fields: ctx, user
func (_m *Repo) CreateNewUSer(ctx context.Context, user entities.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLastMessages provides a mock function with given fields: ctx, limit
func (_m *Repo) GetLastMessages(ctx context.Context, limit int) ([]entities.Message, error) {
	ret := _m.Called(ctx, limit)

	var r0 []entities.Message
	if rf, ok := ret.Get(0).(func(context.Context, int) []entities.Message); ok {
		r0 = rf(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUserName provides a mock function with given fields: ctx, userName
func (_m *Repo) GetUserByUserName(ctx context.Context, userName string) (*entities.User, error) {
	ret := _m.Called(ctx, userName)

	var r0 *entities.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.User); ok {
		r0 = rf(ctx, userName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertMessage provides a mock function with given fields: msg
func (_m *Repo) InsertMessage(msg entities.Message) error {
	ret := _m.Called(msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.Message) error); ok {
		r0 = rf(msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
